{{- if .Values.proxy.install }}
---
kind: Secret
apiVersion: v1
metadata:
  name: proxy-config
  labels:
    name: proxy-config
    app.kubernetes.io/name: proxy-config
    app.kubernetes.io/instance: {{ cat "proxy-config-" .Release.Namespace | nospace | trunc 63 | trimSuffix "-" }}
    app.kubernetes.io/component: query
    {{- include "jaeger.commonLabels" . | nindent 4 }}
    {{- if .Values.query.labels }}
      {{- toYaml .Values.query.labels | nindent 4 }}
    {{- end }}
  {{- if .Values.query.annotations }}
  annotations:
    {{- toYaml .Values.query.annotations | nindent 4 }}
  {{- end }}
type: Opaque
stringData:
  config.yaml: |-
    admin:
      address:
        socket_address:
          protocol: TCP
          address: 0.0.0.0
          port_value: 9901
    {{- if eq .Values.proxy.type "oauth2" }}
    static_resources:
      listeners:
      - name: listener_proxy
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 16688
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: auto
              stat_prefix: ingress_http
              access_log:
              - name: "envoy.access_loggers.stdout"
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                  log_format:
                    text_format_source:
                      inline_string: "[%START_TIME%] audit_log_type %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL% %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% %REQ(X-FORWARDED-FOR)% %REQ(USER-AGENT)% %REQ(X-REQUEST-ID)% %REQ(:AUTHORITY)% %UPSTREAM_HOST%\n"
              route_config:
                name: local_route
                virtual_hosts:
                - name: upstream
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: upstream-service
              http_filters:
              - name: envoy.filters.http.oauth2
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.oauth2.v3.OAuth2
                  config:
                    token_endpoint:
                      cluster: auth
                      uri: {{ .Values.proxy.oauth2.tokenEndpoint }}
                      timeout: 5s
                    authorization_endpoint: {{ .Values.proxy.oauth2.authorizationEndpoint }}
                    redirect_uri: "https://%REQ(:authority)%/callback"
                    auth_scopes: "openid profile"
                    redirect_path_matcher:
                      path:
                        exact: /callback
                    signout_path:
                      path:
                        exact: /signout
                    credentials:
                      client_id: {{ .Values.proxy.oauth2.clientId }}
                      token_secret:
                        name: token
                        sds_config:
                          resource_api_version: V3
                          path_config_source: {"path": /envoy/oauth2/token-secret.yaml}
                      hmac_secret:
                        name: hmac
                        sds_config:
                          resource_api_version: V3
                          path_config_source: {"path": /envoy/oauth2/hmac-secret.yaml}
                    forward_bearer_token: true
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
      - name: auth
        connect_timeout: 5s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: auth
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.proxy.oauth2.idpAddress }}
                    port_value: {{ .Values.proxy.oauth2.idpPort }}
        {{- if and .Values.proxy.oauth2.authorizationEndpoint (hasPrefix "https://" .Values.proxy.oauth2.authorizationEndpoint) }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            sni: {{ .Values.proxy.oauth2.idpAddress }}
        {{- end }}
      - name: upstream-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: upstream-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 0.0.0.0
                    port_value: 16686
    {{- else }}
    static_resources:
      listeners:
      - name: listener_proxy
        address:
          socket_address:
            protocol: TCP
            address: 0.0.0.0
            port_value: 16688
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              access_log:
              - name: "envoy.access_loggers.stdout"
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                  log_format:
                    text_format_source:
                      inline_string: "[%START_TIME%] audit_log_type %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL% %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% %REQ(X-FORWARDED-FOR)% %REQ(USER-AGENT)% %REQ(X-REQUEST-ID)% %REQ(:AUTHORITY)% %UPSTREAM_HOST%\n"
              route_config:
                name: local_route
                virtual_hosts:
                - name: upstream
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: upstream-service
                    metadata:
                      filter_metadata:
                        envoy.filters.http.lua:
                          credentials:
                          {{- range .Values.proxy.basic.users }}
                            - "Basic {{ . }}"
                          {{- end }}
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  default_source_code:
                    inline_string: |
                      function envoy_on_request(request_handle)
                        for _, credential in pairs(request_handle:metadata():get("credentials")) do
                          if request_handle:headers():get("authorization") == credential
                          then
                            return
                          end
                        end
                        request_handle:respond(
                          {[":status"] = "401", ["WWW-Authenticate"] = "Basic realm=\"Unknown\""}, "Unauthorized"
                        )
                      end
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
      - name: upstream-service
        connect_timeout: 25s
        type: LOGICAL_DNS
        # Comment out the following line to test on v6 networks
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: upstream-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: localhost
                    port_value: 16686
    {{- end }}
{{- end }}
