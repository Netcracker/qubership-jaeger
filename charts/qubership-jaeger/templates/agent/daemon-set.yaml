{{- if .Values.agent.install }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Values.jaeger.serviceName }}-agent
  labels:
    name: {{ .Values.jaeger.serviceName }}-agent
    app.kubernetes.io/name: {{ .Values.jaeger.serviceName }}-agent
    app.kubernetes.io/instance: {{ cat .Values.jaeger.serviceName "-agent-" .Release.Namespace | nospace | trunc 63 | trimSuffix "-" }}
    app.kubernetes.io/component: agent
    {{- include "jaeger.commonLabels" . | nindent 4 }}
    {{- if .Values.agent.labels }}
      {{- toYaml .Values.agent.labels | nindent 4 }}
    {{- end }}
  {{- if .Values.agent.annotations }}
  annotations:
    {{- toYaml .Values.agent.annotations | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.jaeger.serviceName }}-agent
      app.kubernetes.io/component: agent
  template:
    metadata:
      {{- if .Values.agent.annotations }}
      annotations:
        {{- toYaml .Values.agent.annotations | nindent 8 }}
      {{- end }}
      labels:
        name: {{ .Values.jaeger.serviceName }}-agent
        app.kubernetes.io/name: {{ .Values.jaeger.serviceName }}-agent
        app.kubernetes.io/instance: {{ cat .Values.jaeger.serviceName "-agent-" .Release.Namespace | nospace | trunc 63 | trimSuffix "-" }}
        app.kubernetes.io/component: agent
        {{- include "jaeger.commonLabels" . | nindent 8 }}
        app.kubernetes.io/managed-by: Helm
        {{- if .Values.agent.labels }}
          {{- toYaml .Values.agent.labels | nindent 8 }}
        {{- end }}
    spec:
      securityContext:
        {{- include "agent.securityContext" . }}
      {{- if .Values.agent.useHostNetwork }}
      hostNetwork: true
      {{- end }}
      serviceAccountName: {{ .Values.jaeger.serviceName }}-agent
      {{- with .Values.agent.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.agent.priorityClassName }}
      priorityClassName: {{ .Values.agent.priorityClassName }}
      {{- end }}
      containers:
      - name: {{ .Values.agent.name }}
        image: {{ template "agent.image" . }}
        imagePullPolicy: {{ .Values.agent.imagePullPolicy }}
        args:
          {{- if .Values.agent.cmdlineParams }}
            {{ toYaml .Values.agent.cmdlineParams | nindent 10 }}
          {{- end }}
        env:
        {{- if .Values.agent.extraEnv }}
          {{- toYaml .Values.agent.extraEnv | nindent 10 }}
        {{- end }}
        - name: REPORTER_GRPC_HOST_PORT
          value: {{ .Values.jaeger.serviceName }}-collector:14250
        ports:
        - name: zipkin-compact
          containerPort: {{ .Values.agent.service.zipkinThriftPort }}
          protocol: UDP
          {{- if .Values.agent.useHostPort }}
          hostPort: {{ .Values.agent.service.zipkinThriftPort }}
          {{- end }}
        - name: jaeger-compact
          containerPort: {{ .Values.agent.service.compactPort }}
          protocol: UDP
          {{- if .Values.agent.useHostPort }}
          hostPort: {{ .Values.agent.service.compactPort }}
          {{- end }}
        - name: jaeger-binary
          containerPort: {{ .Values.agent.service.binaryPort }}
          protocol: UDP
          {{- if .Values.agent.useHostPort }}
          hostPort: {{ .Values.agent.service.binaryPort }}
          {{- end }}
        - name: http
          containerPort: {{ .Values.agent.service.samplingPort }}
          protocol: TCP
          {{- if .Values.agent.useHostPort }}
          hostPort: {{ .Values.agent.service.samplingPort }}
          {{- end }}
        - name: admin
          containerPort: 14271
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: admin
        readinessProbe:
          httpGet:
            path: /
            port: admin
        resources:
          {{- toYaml .Values.agent.resources | nindent 10 }}
        securityContext:
          {{- include "agent.containerSecurityContext" . }}
        volumeMounts:
        {{- range .Values.agent.extraConfigmapMounts }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
            subPath: {{ .subPath }}
            readOnly: {{ .readOnly }}
        {{- end }}
        {{- range .Values.agent.extraSecretMounts }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
            subPath: {{ .subPath }}
            readOnly: {{ .readOnly }}
        {{- end }}
      volumes:
      {{- range .Values.agent.extraConfigmapMounts }}
        - name: {{ .name }}
          configMap:
            name: {{ .configMap }}
      {{- end }}
      {{- range .Values.agent.extraSecretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
      {{- end }}
      {{- if .Values.agent.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.agent.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.agent.tolerations }}
      tolerations:
        {{- toYaml .Values.agent.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.agent.affinity }}
      affinity:
        {{- toYaml .Values.agent.affinity | nindent 8 }}
      {{- end }}
{{- end }}
