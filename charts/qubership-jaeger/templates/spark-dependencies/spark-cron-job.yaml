{{- if .Values.spark.install }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.jaeger.serviceName }}-spark-dependencies
  labels:
    name: {{ .Values.jaeger.serviceName }}-spark-dependencies
    app.kubernetes.io/name: {{ .Values.jaeger.serviceName }}-spark-dependencies
    app.kubernetes.io/component: spark-dependencies
    {{- include "jaeger.commonLabels" . | nindent 4 }}
    {{- if .Values.spark.labels }}
      {{- toYaml .Values.spark.labels | nindent 4 }}
    {{- end }}
  {{- if .Values.spark.annotations }}
  annotations:
    {{- toYaml .Values.spark.annotations | nindent 4 }}
  {{- end }}
spec:
  schedule: "0 19 * * *"
  concurrencyPolicy: {{ .Values.spark.concurrencyPolicy }}
  successfulJobsHistoryLimit: {{ .Values.spark.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.spark.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      {{- if .Values.spark.activeDeadlineSeconds }}
      activeDeadlineSeconds: {{ .Values.spark.activeDeadlineSeconds }}
      {{- end}}
      {{- if .Values.spark.ttlSecondsAfterFinished }}
      ttlSecondsAfterFinished: {{ .Values.spark.ttlSecondsAfterFinished }}
      {{- end }}
      template:
        metadata:
          labels:
            name: {{ .Values.jaeger.serviceName }}-spark-dependencies
            app.kubernetes.io/name: {{ .Values.jaeger.serviceName }}-spark-dependencies
            app.kubernetes.io/component: spark-dependencies
            {{- include "jaeger.commonLabels" . | nindent 12 }}
            {{- if .Values.spark.labels }}
              {{- toYaml .Values.spark.labels | nindent 12 }}
            {{- end }}
          {{- if .Values.spark.annotations }}
          annotations:
            {{- toYaml .Values.spark.annotations | nindent 12 }}
          {{- end }}
        spec:
          {{- with .Values.spark.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.spark.priorityClassName }}
           priorityClassName: {{ .Values.spark.priorityClassName }}
          {{- end }}
          restartPolicy: {{ .Values.spark.restartPolicy | default "OnFailure" }}
          serviceAccount: spark-dependencies-sa
          {{- if or .Values.cassandraSchemaJob.tls.enabled .Values.elasticsearch.client.tls.enabled }}
          volumes:
            - name: truststore-dir
              emptyDir: {}
            {{- if eq .Values.jaeger.storage.type "cassandra" }}
            - name: cassandra-ca-cert
              secret:
                secretName: {{ template "cassandraSchemaJob.tls.secretName" . }}
            {{- else if eq .Values.jaeger.storage.type "elasticsearch" }}
            - name: elasticsearch-ca-cert
              secret:
                secretName: {{ template "elasticsearch.tls.secretName" . }}
            {{- end }}
          initContainers:
            - name: create-jks-truststore
              image: openjdk:11
              command: ["/bin/sh", "-c"]
              args:
                - "rm -rf /target/* && keytool -import -file /src/ca-cert.pem -storetype JKS -keystore /target/truststore.jks -storepass ${TRUSTSTORE_PASSWORD} -noprompt"
              env:
                - name: TRUSTSTORE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.spark.trustStoreSecretName }}
                      key: password
              resources:
                {{- toYaml .Values.spark.init.resources | nindent 16 }}
              volumeMounts:
                - name: truststore-dir
                  mountPath: /target
                {{- if eq .Values.jaeger.storage.type "cassandra" }}
                - name: cassandra-ca-cert
                  readOnly: true
                  mountPath: /src/ca-cert.pem
                  subPath: ca-cert.pem
                {{- else if eq .Values.jaeger.storage.type "elasticsearch" }}
                - name: elasticsearch-ca-cert
                  readOnly: true
                  mountPath: /src/ca-cert.pem
                  subPath: ca-cert.pem
                {{- end }}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: {{ .Values.spark.imagePullPolicy }}
          {{- end }}
          containers:
            - name: spark-dependencies
              image: {{ template "spark-dependencies.image" . }}
              {{- if or .Values.cassandraSchemaJob.tls.enabled .Values.elasticsearch.client.tls.enabled }}
              command: ["/bin/sh", "-c"]
              args:
                - "export JAVA_OPTS=\"$JAVA_OPTS -Djavax.net.ssl.trustStore=/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword=${TRUSTSTORE_PASSWORD}\" && exec /entrypoint.sh java $JAVA_OPTS -jar $APP_HOME/jaeger-spark-dependencies-0.0.1-SNAPSHOT.jar"
              {{- end }}
              env:
                - name: STORAGE
                  value: {{ .Values.jaeger.storage.type }}
                - name: JAVA_OPTS
                  value: {{ .Values.spark.javaOpts | default "-Xmx512m" }}
                {{- if eq .Values.jaeger.storage.type "cassandra" }}
                - name: CASSANDRA_CONTACT_POINTS
                  value: {{ include "cassandraSchemaJob.host" . }}
                - name: CASSANDRA_LOCAL_DC
                  value: {{ include "cassandraSchemaJob.datacenter" . }}
                - name: CASSANDRA_KEYSPACE
                  value: {{ .Values.cassandraSchemaJob.keyspace }}
                - name: CASSANDRA_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ template "cassandraSchemaJob.secretName" . }}
                      key: password
                - name: CASSANDRA_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: {{ template "cassandraSchemaJob.secretName" . }}
                      key: username
                - name: CASSANDRA_USE_SSL
                  value: {{ .Values.cassandraSchemaJob.tls.enabled | quote | default "false" }}
                {{- else if eq .Values.jaeger.storage.type "elasticsearch" }}
                - name: ES_NODES
                  value: {{ include "elasticsearch.url" . }}
                {{- if .Values.elasticsearch.indexPrefix }}
                - name: ES_INDEX_PREFIX
                  value: {{ .Values.elasticsearch.indexPrefix }}
                {{- end }}
                {{- if .Values.spark.elasticsearch.indexDateSeparator }}
                - name: ES_INDEX_DATE_SEPARATOR
                  value: {{ .Values.spark.elasticsearch.indexDateSeparator }}
                {{- end }}
                {{- if .Values.spark.elasticsearch.timeRange }}
                - name: ES_TIME_RANGE
                  value: {{ .Values.spark.elasticsearch.timeRange }}
                {{- end }}
                {{- if .Values.spark.elasticsearch.useAliases }}
                - name: ES_USE_ALIASES
                  value: {{ .Values.spark.elasticsearch.useAliases }}
                {{- end }}
                - name: ES_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: {{ if .Values.elasticsearch.existingSecret }}{{ .Values.elasticsearch.existingSecret }}{{- else }}{{ .Values.jaeger.serviceName }}-elasticsearch{{- end }}
                      key: username
                - name: ES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ if .Values.elasticsearch.existingSecret }}{{ .Values.elasticsearch.existingSecret }}{{- else }}{{ .Values.jaeger.serviceName }}-elasticsearch{{- end }}
                      key: password
                {{- end }}
              {{- if or .Values.cassandraSchemaJob.tls.enabled .Values.elasticsearch.client.tls.enabled }}
                - name: TRUSTSTORE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.spark.trustStoreSecretName }}
                      key: password
              volumeMounts:
                - name: truststore-dir
                  mountPath: /truststore
              {{- end }}
              resources:
                {{- toYaml .Values.spark.resources | nindent 16 }}
              {{- if .Values.spark.containerSecurityContext }}
              securityContext:
              {{- toYaml .Values.spark.containerSecurityContext | nindent 14 }}
              {{- end }}
          {{- if .Values.spark.securityContext }}
          securityContext:
          {{- toYaml .Values.spark.securityContext | nindent 10 }}
          {{- end }}
          {{- if .Values.spark.affinity }}
          affinity:
            {{- toYaml .Values.spark.affinity | nindent 14 }}
          {{- end }}
          {{- if .Values.spark.nodeSelector }}
          nodeSelector:
            {{- toYaml .Values.spark.nodeSelector | nindent 14 }}
          {{- end }}
          {{- if .Values.spark.tolerations }}
          tolerations:
            {{- toYaml .Values.spark.tolerations | nindent 14 }}
          {{- end }}
{{- end }}
