{{- $otelhttpTlsConfigEnabled := .Values.collector.tlsConfig.otelHttp.enabled }}
{{- $otelgrpcTlsConfigEnabled := .Values.collector.tlsConfig.otelgRPC.enabled }}
{{- $jaegerhttpTlsConfigEnabled := .Values.collector.tlsConfig.jaegerHttp.enabled }}
{{- $jaegergrpcTlsConfigEnabled := .Values.collector.tlsConfig.jaegergRPC.enabled }}
{{- $zipkinTlsConfigEnabled := .Values.collector.tlsConfig.zipkin.enabled }}
{{- if .Values.collector.install }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.jaeger.serviceName }}-collector-configuration
  labels:
    name: {{ .Values.jaeger.serviceName }}-collector-configuration
    app.kubernetes.io/name: {{ .Values.jaeger.serviceName }}-collector-configuration
    app.kubernetes.io/instance: {{ cat .Values.jaeger.serviceName "-collector-configuration-" .Release.Namespace | nospace | trunc 63 | trimSuffix "-" }}
    app.kubernetes.io/component: collector
    {{- include "jaeger.commonLabels" . | nindent 4 }}
    {{- if .Values.collector.labels }}
      {{- toYaml .Values.collector.labels | nindent 4 }}
    {{- end }}
  {{- if .Values.collector.annotations }}
  annotations:
    {{- toYaml .Values.collector.annotations | nindent 4 }}
  {{- end }}
data:
  config.yaml: |
    service:
      extensions: {{ if .Values.collector.sampling.type }}[jaeger_storage,healthcheckv2,remote_sampling]{{ else }}[jaeger_storage,healthcheckv2]{{- end }}
      pipelines:
        traces:
          receivers: [otlp,jaeger,zipkin]
          processors: [batch]
          exporters: [jaeger_storage_exporter]
      telemetry:
        resource:
          service.name: jaeger
        metrics:
          level: detailed
          readers:
            - pull:
                exporter:
                  prometheus:
                    host: 0.0.0.0
                    port: 8888
        logs:
          level: debug
    extensions:
      {{- if .Values.collector.sampling.type }}
      remote_sampling:
        {{- if eq .Values.collector.sampling.type "file" }}
        file:
          path: /etc/jaeger/sampling/sampling.json
        {{- else }}
        adaptive:
          initial_sampling_probability: {{ .Values.collector.sampling.adaptive.initialSamplingProbability | default 0.001 }}
          target_samples_per_second: {{ .Values.collector.sampling.adaptive.targetSamplesPerSecond | default 1 }}
          sampling_store: {{ if eq .Values.jaeger.storage.type "cassandra" }}main_cassandra{{ else if eq .Values.jaeger.storage.type "elasticsearch" }}main_elasticsearch{{- end }}
        {{- end }}
      {{- end }}
      healthcheckv2:
        use_v2: true
        http:
          endpoint: "0.0.0.0:13133"
      jaeger_storage:
        backends:
          {{- if eq .Values.jaeger.storage.type "cassandra" }}
          main_cassandra:
            cassandra:
              schema:
                create: {{ .Values.cassandraSchemaJob.createKeyspace | default "true" }}
                keyspace: {{ .Values.cassandraSchemaJob.keyspace | quote }}
              connection:
                local_dc: {{ include "cassandraSchemaJob.datacenter" . }}
                servers:
                  {{- if .Values.cassandraSchemaJob.host }}
                  - {{ .Values.cassandraSchemaJob.host -}}
                  {{- else }}
                  {{- if .Values.INFRA_CASSANDRA_HOST -}}
                  - {{ .Values.INFRA_CASSANDRA_HOST -}}
                  {{- else -}}
                  - cassandra.cassandra.svc
                  {{- end -}}
                  {{- end }}
                port: {{ if .Values.cassandraSchemaJob.port}}{{.Values.cassandraSchemaJob.port}}{{- else }}{{ if .Values.INFRA_CASSANDRA_PORT }}{{ .Values.INFRA_CASSANDRA_PORT }}{{ else}}9042{{- end }}{{- end }}
                tls:
                  {{- if .Values.cassandraSchemaJob.tls.enabled }}
                  {{- if .Values.cassandraSchemaJob.tls.insecureSkipVerify }}
                  insecure_skip_verify: true
                  {{- end }}
                  ca_file: /cassandra-tls/ca-cert.pem
                  cert_file: /cassandra-tls/client-cert.pem
                  key_file: /cassandra-tls/client-key.pem
                  {{- else }}
                  insecure: true
                  {{- end }}
                auth:
                  basic:
                    username: "${env:CASSANDRA_USERNAME}"
                    password: "${env:CASSANDRA_PASSWORD}"
                    allowed_authenticators:
                    {{- if .Values.cassandraSchemaJob.allowedAuthenticators -}}
                    {{- range .Values.cassandraSchemaJob.allowedAuthenticators }}
                      - {{ . }}
                    {{- end}}
                    {{- else }}
                    {{- range .Values.cassandraSchemaJob.defaultAllowedAuthenticators }}
                      - {{ . }}
                    {{- end }}
                    {{- end }}
          {{- else if eq .Values.jaeger.storage.type "elasticsearch" }}
          main_elasticsearch:
            elasticsearch:
              server_urls:
                {{ if and .Values.elasticsearch.client.url .Values.elasticsearch.client.scheme }}
                  {{- printf "- %s://%s" ( .Values.elasticsearch.client.scheme ) ( .Values.elasticsearch.client.url ) -}}
                {{- else }}
                  {{- if .Values.INFRA_OPENSEARCH_URL -}}
                  {{- printf "%s" .Values.INFRA_OPENSEARCH_URL -}}
                  {{- else -}}
                  {{- print "" -}}
                  {{- end -}}
                {{- end }}
              auth:
                basic:
                  username: "${env:ES_USERNAME}"
                  password: "${env:ES_PASSWORD}"
              {{- if .Values.elasticsearch.indexPrefix }}
              indices:
                index_prefix: {{ .Values.elasticsearch.indexPrefix | quote }}
              {{- end }}
              tls:
                {{- if .Values.elasticsearch.client.tls.enabled }}
                {{- if .Values.elasticsearch.client.tls.insecureSkipVerify }}
                insecure_skip_verify: true
                {{- else }}
                ca_file: /es-tls/ca-cert.pem
                cert_file: /es-tls/client-cert.pem
                key_file: /es-tls/client-key.pem
                {{- end}}
                {{- else }}
                insecure: true
                {{- end }}
          {{- else if eq .Values.jaeger.storage.type "remotegRPC" }}
          remote_grpc:
            grpc:
              endpoint: {{- .Values.remotegRPC.url }}
              timeout: {{- .Values.remotegRPC.timeout }}
              {{- if .Values.remotegRPC.tls.enabled }}
              tls:
                {{- if .Values.remotegRPC.tls.insecureSkipVerify }}
                insecure_skip_verify: true
                {{- else }}
                ca_file: /grpc-tls/ca-cert.pem
                cert_file: /grpc-tls/client-cert.pem
                key_file: /grpc-tls/client-key.pem
                {{- end }}
              {{- end }}
          {{- end }}

    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
            {{- if $otelgrpcTlsConfigEnabled }}
            tls:
              client_ca_file: /collector-tls/ca.crt
              cert_file: /collector-tls/tls.crt
              key_file: /collector-tls/tls.key
              {{- if .Values.collector.tlsConfig.otelgRPC.cipherSuites }}
              cipher_suites:
              {{- range  .Values.collector.tlsConfig.otelgRPC.cipherSuites | split "," }}
                - {{ . }}
              {{- end }}
              {{- end }}
              {{- if .Values.collector.tlsConfig.otelgRPC.maxVersion }}
              max_version: {{ .Values.collector.tlsConfig.otelgRPC.maxVersion | quote }}
              {{- end }}
              {{- if .Values.collector.tlsConfig.otelgRPC.minVersion }}
              min_version: {{ .Values.collector.tlsConfig.otelgRPC.minVersion | quote }}
              {{- end }}
            {{- end }}
            {{- if or .Values.collector.otlp.grpc.maxConnectionAge .Values.collector.otlp.grpc.maxConnectionAgeGrace }}
            keepalive:
              server_parameters:
                {{- if .Values.collector.otlp.grpc.maxConnectionAge }}
                max_connection_age: {{ .Values.collector.otlp.grpc.maxConnectionAge }}
                {{- end }}
                {{- if .Values.collector.otlp.grpc.maxConnectionAgeGrace }}
                max_connection_age_grace: {{ .Values.collector.otlp.grpc.maxConnectionAgeGrace }}
                {{- end }}
            {{- end }}
            {{- if .Values.collector.otlp.grpc.maxRecvMsgSizeMib }}
            max_recv_msg_size_mib: {{ .Values.collector.otlp.grpc.maxRecvMsgSizeMib }}
            {{- end }}
          http:
            endpoint: "0.0.0.0:4318"
            {{- if $otelhttpTlsConfigEnabled }}
            tls:
              client_ca_file: /collector-tls/ca.crt
              cert_file: /collector-tls/tls.crt
              key_file: /collector-tls/tls.key
              {{- if .Values.collector.tlsConfig.otelHttp.cipherSuites }}
              cipher_suites:
              {{- range $suite := .Values.collector.tlsConfig.otelHttp.cipherSuites | split "," }}
                - {{ $suite }}
              {{- end }}
              {{- end }}
              {{- if .Values.collector.tlsConfig.otelHttp.maxVersion }}
              max_version: {{ .Values.collector.tlsConfig.otelHttp.maxVersion | quote }}
              {{- end }}
              {{- if .Values.collector.tlsConfig.otelHttp.minVersion }}
              min_version: {{ .Values.collector.tlsConfig.otelHttp.minVersion | quote }}
              {{- end }}
            {{- end }}
            {{- if .Values.collector.otlp.http.idleTimeout }}
            idle_timeout: {{ .Values.collector.otlp.http.idleTimeout }}
            {{- end }}
            {{- if .Values.collector.otlp.http.readHeaderTimeout }}
            idle_timeout: {{ .Values.collector.otlp.http.readHeaderTimeout }}
            {{- end }}
            {{- if .Values.collector.otlp.http.readTimeout }}
            idle_timeout: {{ .Values.collector.otlp.http.readTimeout }}
            {{- end }}
            {{- if or .Values.collector.otlp.http.cors.allowedOrigins .Values.collector.otlp.http.cors.allowedHeaders .Values.collector.otlp.http.cors.maxAge }}
            cors:
              {{- if .Values.collector.otlp.http.cors.allowedOrigins }}
              allowed_origins: {{ .Values.collector.otlp.http.cors.allowedOrigins | quote }}
              {{- end }}
              {{- if .Values.collector.otlp.http.cors.allowedHeaders }}
              allowed_headers: {{ .Values.collector.otlp.http.cors.allowedHeaders | quote }}
              {{- end }}
              {{- if .Values.collector.otlp.http.cors.maxAge }}
              max_age: {{ .Values.collector.otlp.http.cors.maxAge }}
              {{- end }}
            {{- end }}
      jaeger:
        protocols:
          thrift_binary:
          thrift_compact:
          thrift_http:
            endpoint: "0.0.0.0:14268"
            {{- if $jaegerhttpTlsConfigEnabled }}
            tls:
              cert_file: /collector-tls/tls.crt
              client_ca_file: /collector-tls/ca.crt
              key_file: /collector-tls/tls.key
              {{- if .Values.collector.tlsConfig.jaegerHttp.maxVersion }}
              max_version: {{ .Values.collector.tlsConfig.jaegerHttp.maxVersion | quote }}
              {{- end }}
              {{- if .Values.collector.tlsConfig.jaegerHttp.minVersion }}
              min_version: {{ .Values.collector.tlsConfig.jaegerHttp.minVersion | quote }}
              {{- end }}
              {{- if .Values.collector.tlsConfig.jaegerHttp.cipherSuites }}
              cipher_suites:
              {{- range $suite := .Values.collector.tlsConfig.jaegerHttp.cipherSuites | split "," }}
                - {{ $suite }}
              {{- end }}
              {{- end }}
            {{- end }}
            {{- if .Values.collector.jaeger.http.idleTimeout }}
            idle_timeout: {{ .Values.collector.jaeger.http.idleTimeout }}
            {{- end }}
            {{- if .Values.collector.jaeger.http.readHeaderTimeout }}
            read_header_timeout: {{ .Values.collector.jaeger.http.readHeaderTimeout }}
            {{- end }}
            {{- if .Values.collector.jaeger.http.readTimeout }}
            read_timeout: {{ .Values.collector.jaeger.http.readTimeout }}
            {{- end }}
          grpc:
            endpoint: "0.0.0.0:14250"
            {{- if $jaegergrpcTlsConfigEnabled }}
            tls:
              cert_file: /collector-tls/tls.crt
              client_ca_file: /collector-tls/ca.crt
              key_file: /collector-tls/tls.key
              {{- if .Values.collector.tlsConfig.jaegergRPC.maxVersion }}
              max_version: {{ .Values.collector.tlsConfig.jaegergRPC.maxVersion | quote }}
              {{- end }}
              {{- if .Values.collector.tlsConfig.jaegergRPC.minVersion }}
              min_version: {{ .Values.collector.tlsConfig.jaegergRPC.minVersion | quote }}
              {{- end }}
              {{- if .Values.collector.tlsConfig.jaegergRPC.cipherSuites }}
              cipher_suites:
              {{- range $suite := .Values.collector.tlsConfig.jaegergRPC.cipherSuites | split "," }}
                - {{ $suite }}
              {{- end }}
              {{- end }}
            {{- end }}
            {{- if .Values.collector.jaeger.grpc.maxConnectionAge }}
            max_connection_age: {{ .Values.collector.jaeger.grpc.maxConnectionAge }}
            {{- end }}
            {{- if .Values.collector.jaeger.grpc.maxConnectionAgeGrace }}
            max_connection_age_grace: {{ .Values.collector.jaeger.grpc.maxConnectionAgeGrace }}
            {{- end }}
            {{- if .Values.collector.jaeger.grpc.maxRecvMsgSizeMib }}
            max_recv_msg_size_mib: {{ .Values.collector.jaeger.grpc.maxRecvMsgSizeMib }}
            {{- end }}
      zipkin:
        {{- if $zipkinTlsConfigEnabled }}
        {{- if .Values.collector.zipkin.disableKeepAlives }}
        disable_keep_alives: true
        {{- end }}
        {{- if or .Values.collector.zipkin.cors.allowedOrigins .Values.collector.zipkin.allowedHeaders }}
        cors:
        {{- if .Values.collector.zipkin.cors.allowedOrigins }}
          allowed_origins: {{ .Values.collector.zipkin.cors.allowedOrigins }}
        {{- end }}
        {{- if .Values.collector.zipkin.cors.allowedHeaders }}
          allowed_headers: {{ .Values.collector.zipkin.allowedHeaders }}
        {{- end }}
        {{- end }}
        tls:
          cert_file: /collector-tls/tls.crt
          client_ca_file: /collector-tls/ca.crt
          key_file: /collector-tls/tls.key
          {{- if .Values.collector.tlsConfig.zipkin.cipherSuites }}
          cipher_suites:
          {{- range $suite := .Values.collector.tlsConfig.zipkin.cipherSuites | split "," }}
            - {{ $suite }}
          {{- end }}
          {{- end }}
          {{- if .Values.collector.tlsConfig.zipkin.maxVersion }}
          max_version: {{ .Values.collector.tlsConfig.zipkin.maxVersion | quote }}
          {{- end }}
          {{- if .Values.collector.tlsConfig.zipkin.minVersion }}
          min_version: {{ .Values.collector.tlsConfig.zipkin.minVersion | quote }}
          {{- end }}
        {{- end }}
    processors:
      batch:
    exporters:
      jaeger_storage_exporter:
        trace_storage: {{ if eq .Values.jaeger.storage.type "cassandra" }}main_cassandra{{ else if eq .Values.jaeger.storage.type "elasticsearch" }}main_elasticsearch{{ else if eq .Values.jaeger.storage.type "remotegRPC" }}remote_grpc{{- end }}
{{- end }}
