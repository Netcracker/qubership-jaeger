---
name: Test qubership-jaeger installation

on:
  workflow_run:
    workflows: ["Build Docker with Matrix Strategy"]
    types:
    - completed
  workflow_dispatch: {}
  pull_request:
    branches:
    - main
    paths-ignore:
    - '.github/**'
    - '.git*'
    - '.*ignore'
    - 'docs/**'
    - 'CODE-OF-CONDUCT.md'
    - 'CONTRIBUTING.md'
    - 'LICENSE'
    - 'README.md'
    - 'SECURITY.md'

env:
  kind_version: v0.27.0
  cassandra_namespace: k8ssandra-operator
  namespace: jaeger
  max_attempts: 50
  delay: 10

jobs:
  Run-Integration-Tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: qubership-jaeger

    - name: Set up Kind
      run: |
        curl -sLo ./kind https://kind.sigs.k8s.io/dl/${{ env.kind_version }}/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/
        kind create cluster
      shell: bash

    - name: Set up Kubectl
      run: |
        curl -sLo ./kubectl "https://dl.k8s.io/release/$(curl -LS https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/
      shell: bash

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      shell: bash

    - name: Install cert-manager
      run: |
        helm repo add jetstack https://charts.jetstack.io --force-update
        helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager \
          --create-namespace --version v1.16.3 --set prometheus.enabled=true   --set crds.enabled=true
      shell: bash

    - name: Install k8ssandra operator
      run: |
        helm repo add k8ssandra https://helm.k8ssandra.io/stable --force-update
        helm upgrade --install k8ssandra-operator k8ssandra/k8ssandra-operator \
          --namespace ${{ env.cassandra_namespace }} --create-namespace
      shell: bash

    - name: Check k8ssandra-operator pod status
      run: |
        attempt=1
        max_attempts=${{ env.max_attempts }}
        while [[ $attempt -le $max_attempts ]]; do
          echo "Attempt $attempt/$max_attempts: Checking k8ssandra-operator pod status..."
          phase=$(kubectl get pod -l app.kubernetes.io/name=k8ssandra-operator -n ${{ env.cassandra_namespace }} -o jsonpath='{.items[0].status.phase}' 2>/dev/null || echo "NotFound")
          ready=$(kubectl get pod -l app.kubernetes.io/name=k8ssandra-operator -n ${{ env.cassandra_namespace }} -o jsonpath='{.items[0].status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "NotFound")
          scheduled=$(kubectl get pod -l app.kubernetes.io/name=k8ssandra-operator -n ${{ env.cassandra_namespace }} -o jsonpath='{.items[0].status.conditions[?(@.type=="PodScheduled")].status}' 2>/dev/null || echo "SchedulingError")
          if [[ "$ready" == "True" ]]; then
            echo "k8ssandra-operator pod is ready."
            break
          elif [[ "$ready" == "False" && "$phase" == "Running" ]]; then
            echo "k8ssandra-operator pod is not ready yet."
            sleep ${{ env.delay }}
            ((attempt++))
          elif [[ "$phase" == "Pending" && "$scheduled" == "True" ]]; then
            echo "k8ssandra-operator pod status: $phase. Retrying in ${{ env.delay }} seconds..."
            sleep ${{ env.delay }}
            ((attempt++))
          else
            echo "k8ssandra-operator pod status: $phase"
            cass_operator_pod=$(kubectl get pods -l app.kubernetes.io/name=k8ssandra-operator -n ${{ env.cassandra_namespace }} -o jsonpath='{.items[0]}' -o custom-columns=":metadata.name" --no-headers)
            kubectl events -n ${{ env.cassandra_namespace }} --for pod/"$cass_operator_pod"
            exit 1
          fi
        done
        if [[ "$ready" != "True" && "$phase" != "Running" ]]; then
          echo "ERROR: Maximum attempts reached. k8ssandra-operator pod is not healthy."
          kubectl get pods -n ${{ env.cassandra_namespace }}
          echo -e "\n======================================================================"
          kubectl get events -n ${{ env.cassandra_namespace }}
          exit 1
        fi
      shell: bash

    - name: Deploy k8ssandra cluster
      run: |
        cat <<EOF | kubectl apply -n ${{ env.cassandra_namespace }} -f -
        apiVersion: k8ssandra.io/v1alpha1
        kind: K8ssandraCluster
        metadata:
          name: cassandra
        spec:
          cassandra:
            serverVersion: "4.0.1"
            datacenters:
              - metadata:
                  name: dc1
                size: 1
                storageConfig:
                  cassandraDataVolumeClaimSpec:
                    storageClassName: standard
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 5Gi
                config:
                  jvmOptions:
                    heapSize: 512M
        EOF
      shell: bash

    - name: Check k8ssandra cluster status
      id: check_k8ssandra_status
      run: |
        attempt=1
        max_attempts=${{ env.max_attempts }}
        echo "Delaying for ${{ env.delay }} seconds before checking cassandra cluster..."
        sleep ${{ env.delay }}
        while [[ $attempt -le $max_attempts ]]; do
          echo "Attempt $attempt/$max_attempts: Checking k8ssandra cluster status..."
          phase=$(kubectl get pod -l app.kubernetes.io/name=cassandra -n ${{ env.cassandra_namespace }} -o jsonpath='{.items[0].status.phase}' 2>/dev/null || echo "NotFound")
          ready=$(kubectl get pod -l app.kubernetes.io/name=cassandra -n ${{ env.cassandra_namespace }} -o jsonpath='{.items[0].status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "NotFound")
          scheduled=$(kubectl get pod -l app.kubernetes.io/name=cassandra -n ${{ env.cassandra_namespace }} -o jsonpath='{.items[0].status.conditions[?(@.type=="PodScheduled")].status}' 2>/dev/null || echo "SchedulingError")
          if [[ "$ready" == "True" ]]; then
            echo "k8ssandra cluster is ready."
            break
          elif [[ "$ready" == "False" && "$phase" == "Running" ]]; then
            echo "k8ssandra cluster is not ready yet."
            sleep ${{ env.delay }}
            ((attempt++))
          elif [[ "$phase" == "Pending" && "$scheduled" == "True" ]]; then
            echo "k8ssandra cluster status: $phase. Retrying in ${{ env.delay }} seconds..."
            sleep ${{ env.delay }}
            ((attempt++))
          else
            echo "k8ssandra cluster status: $phase"
            cassandra_pod=$(kubectl get pod -l app.kubernetes.io/name=cassandra -n ${{ env.cassandra_namespace }} -o jsonpath='{.items[0]}' -o custom-columns=":metadata.name" --no-headers)
            kubectl events -n ${{ env.cassandra_namespace }} --for pod/"$cassandra_pod"
            exit 1
          fi
        done
        if [[ "$ready" != "True" && "$phase" != "Running" ]]; then
          echo "ERROR: Maximum attempts reached. k8ssandra cluster is not ready."
          kubectl get pods -n ${{ env.cassandra_namespace }}
          echo -e "\n======================================================================"
          kubectl get events -n ${{ env.cassandra_namespace }}
          exit 1
        fi
      shell: bash

    - name: Install jaeger
      run: |
        TAG="${GITHUB_SHA:0:11}"
        CASSANDRA_USER=$(kubectl get secret -n ${{ env.cassandra_namespace }} cassandra-superuser -o json | jq -r '.data.username' | base64 -d)
        CASSANDRA_PASSWORD=$(kubectl get secret -n ${{ env.cassandra_namespace }} cassandra-superuser -o json | jq -r '.data.password' | base64 -d)
        CASSANDRA_SVC="cassandra-dc1-service.${{ env.cassandra_namespace }}"
        helm upgrade --install qubership-jaeger ./qubership-jaeger/charts/qubership-jaeger --namespace ${{ env.namespace }} \
          --create-namespace --set jaeger.prometheusMonitoringDashboard=false --set jaeger.prometheusMonitoring=false \
          --set "cassandraSchemaJob.host=$CASSANDRA_SVC" --set "cassandraSchemaJob.username=$CASSANDRA_USER" \
          --set "cassandraSchemaJob.password=$CASSANDRA_PASSWORD" --set cassandraSchemaJob.datacenter=dc1 \
          --set "readinessProbe.image=ghcr.io/netcracker/jaeger-readiness-probe:$TAG" \
          --set "integrationTests.install=true" \
          --set "integrationTests.image=ghcr.io/netcracker/jaeger-integration-tests:$TAG"
      shell: bash

    - name: Checking jaeger status
      id: check_jaeger
      run: |
        echo "Checking status of jaeger..."

        check_pod_status() {
          local label=$1
          local namespace=$2
          local json
          json=$(kubectl get pod -l "$label" -n "$namespace" -o json 2>/dev/null)
          local phase ready scheduled
          phase=$(echo "$json" | jq -r '.items[0].status.phase // empty')
          ready=$(echo "$json" | jq -r '.items[0].status.conditions[]? | select(.type == "Ready") | .status // empty')
          scheduled=$(echo "$json" | jq -r '.items[0].status.conditions[]? | select(.type == "PodScheduled") | .status // empty')
          echo "$phase|$ready|$scheduled"
        }

        is_problem_pods() {
          local namespace=$1
          local problem_pods
          problem_pods=$(kubectl get pods -n "$namespace" 2>/dev/null | grep -E "ImagePullBackOff|ErrImagePull|InvalidImageName" || true)
          if [[ -n "$problem_pods" ]]; then
            echo "::error::‚ùå Some images cannot be pulled:"
            echo "$problem_pods"
            return 0
          fi
          return 1
        }

        attempt=1
        max_attempts=${{ env.max_attempts }}
        delay=${{ env.delay }}

        while [[ $attempt -le $max_attempts ]]; do
          if is_problem_pods "${{ env.namespace }}"; then
            exit 1
          fi

          echo "Attempt $attempt/$max_attempts: Checking jaeger pods status..."

          IFS="|" read -r collector_phase collector_ready collector_scheduled < <(check_pod_status "name=jaeger-collector" "${{ env.namespace }}")
          IFS="|" read -r query_phase query_ready query_scheduled < <(check_pod_status "name=jaeger-query" "${{ env.namespace }}")

          if [[ "$collector_ready" == "True" && "$query_ready" == "True" ]]; then
            echo "‚úÖ Jaeger collector and query are ready."
            break
          elif { [[ "$collector_ready" == "False" && "$collector_phase" == "Running" ]] || [[ "$query_ready" == "False" && "$query_phase" == "Running" ]]; }; then
            echo "Jaeger is not ready yet. Retrying in $delay seconds..."
            kubectl get pods -n ${{ env.namespace }}
            sleep $delay
            ((attempt++))
          elif { [[ "$collector_phase" == "Pending" && "$collector_scheduled" == "True" ]] || [[ "$query_phase" == "Pending" && "$query_scheduled" == "True" ]]; }; then
            echo "Jaeger status: collector: $collector_phase, query: $query_phase. Retrying in $delay seconds..."
            kubectl get pods -n ${{ env.namespace }}
            sleep $delay
            ((attempt++))
          else
            echo "::error::‚ùå Jaeger pods cannot start"
            echo -e "Events for jaeger namespace pod:\n$(kubectl get events -n ${{ env.namespace }})"
            echo -e "Pods status in ${{ env.namespace }} namespace:\n$(kubectl get pods -n ${{ env.namespace }})"
            exit 1
          fi
        done

        if [[ "$collector_ready" != "True" || "$query_ready" != "True" ]]; then
          echo "::error::‚ùå Maximum attempts reached. Jaeger is not ready."
          exit 1
        fi
      shell: bash

    - name: Check integration tests status
      run: |
        echo "Checking status of integration tests pod..."
        attempt=1
        max_attempts=${{ env.max_attempts }}
        while [[ $attempt -le $max_attempts ]]; do
          problem_pods=$(kubectl get pods -n ${{ env.namespace }} 2>/dev/null| grep -E "ImagePullBackOff|ErrImagePull|InvalidImageName" || true)
          if [[ -n "$problem_pods" ]]; then
            echo -e"::error::‚ùå Some images cannot be pulled:\n$problem_pods"
            exit 1
          fi
          echo "Attempt $attempt/$max_attempts: Checking integration-tests pod status..."
          pod=$(kubectl get pod -l name=jaeger-integration-tests-runner -n ${{ env.namespace }} -o jsonpath='{.items[0]}')
          phase=$(echo "$pod" | jq -r '.status.phase')
          ready=$(echo "$pod" | jq -r '.status.conditions[] | select(.type == "Ready") | .status')
          scheduled=$(echo "$pod" | jq -r '.status.conditions[] | select(.type == "PodScheduled") | .status')
          if [[ "$ready" == "True" ]]; then
            echo "‚úÖIntegration tests pod is ready."
            break
          elif [[ "$ready" == "False" && "$phase" == "Running" ]]; then
            echo "Integration tests pod is not ready yet. Retrying in ${{ env.delay }} seconds..."
            sleep ${{ env.delay }}
            ((attempt++))
          elif [[ "$phase" == "Pending" && "$scheduled" == "True" ]]; then
              echo "Integration tests pod status: $phase. Retrying in ${{ env.delay }} seconds..."
              kubectl get pods -n ${{ env.namespace }}
              sleep ${{ env.delay }}
              ((attempt++))
          else
            kubectl get pods -n ${{ env.namespace }}
            pod_events=$(kubectl events -n ${{ env.namespace }} --for pod/"$(echo $pod | jq -r '.metadata.name')")
            echo "::error::‚ùå Integration tests pod cannot start"
            echo -e "Events for integration tests pod:\n$pod_events"
            echo -e "Pods status in ${{ env.namespace }} namespace:\n$(kubectl get pods -n ${{ env.namespace }})"
            exit 1
          fi
        done
        if [[ "$ready" != "True" ]]; then
          echo "::error::‚ùå Maximum attempts reached. Integration tests pod is not ready."
          exit 1
        fi
      shell: bash

    - name: Check integration tests results
      id: check_integration_tests
      run: |
        echo "Checking integration tests results..."
        attempt=1
        max_attempts=${{ env.max_attempts }}
        while [[ $attempt -le $max_attempts ]]; do
          echo "Attempt $attempt/$max_attempts: Checking tests results..."
          logs=$(kubectl logs -l name=jaeger-integration-tests-runner -n ${{ env.namespace }} --tail=-1)
          if echo "$logs" | grep -qE "Report:  /opt/robot/output/report.html" ; then
            stats_line=$(echo "$logs" | grep -E '[0-9]+\ tests,\ [0-9]+\ passed,\ [0-9]+\ failed(,\ [0-9]+\ skipped)?' | tail -n 1)
            read -r total passed failed skipped <<< "$(echo "$stats_line" | awk '{ gsub(",", "", $0); print $1, $3, $5, $7}')"
            if [[ "$failed" == "0" ]]; then
              TEST_RESULTS=$(echo "$logs" | awk -v RS='\r?\n' '/^==============================================================================$/ && !found {found=1; print; next} found && /^Output:/ {exit} found')
        cat <<EOF >> $GITHUB_OUTPUT
        total=${total}
        failed=${failed}
        skipped=${skipped}
        passed=${passed}
        test_results<<END
        $TEST_RESULTS
        END
        EOF
              exit 0
            else
              echo "::error::‚ùå Smoke test has failed steps"
              TEST_RESULTS=$(echo "$logs" | awk -v RS='\r?\n' '/^==============================================================================$/ && !found {found=1; print; next} found && /^Output:/ {exit} found')
        cat <<EOF >> $GITHUB_OUTPUT
        status=‚ùåfailed
        details=Check logs in uploaded artifacts
        test_results<<END
        $TEST_RESULTS
        END
        EOF
              exit 1
            fi
          else
            echo "Smoke test is not completed yet. Checking in ${{ env.delay }} seconds..."
            sleep ${{ env.delay }}
            ((attempt++))
          fi
        done
        echo "::error::‚ùå Maximum attempts reached waiting for Integration test completion"
        cat <<EOF >> $GITHUB_OUTPUT
        status=‚ùåfailed
        test_results<<END
        $logs
        END
        EOF
        echo "details=Check logs in uploaded artifacts" >> $GITHUB_OUTPUT
        exit 1
      shell: bash

    - name: Save jaeger artifacts
      id: jaeger_artifacts
      if: always()
      run: |
        mkdir -p "artifacts/${{ env.namespace }}"
        pods=$(kubectl get pods -n ${{ env.namespace }} -o wide)
        echo "$pods" > artifacts/${{ env.namespace }}/pods.txt
        PODS_TABLE=$(kubectl get pods -n ${{ env.namespace }} -o wide)
        cat <<EOF >> $GITHUB_OUTPUT
        jaeger_pods<<END
        $PODS_TABLE
        END
        EOF
        kubectl get events -n "${{ env.namespace }}" --sort-by=.metadata.creationTimestamp > artifacts/${{ env.namespace }}/events.txt
        kubectl get pods -n "${{ env.namespace }}" -o jsonpath='{range .items[*]}{.metadata.name}{" "}{.spec.containers[*].name}{"\n"}{end}' | while read -r pod containers; do
          for container in $containers; do
            echo "Fetching logs in ${{ env.namespace }} namespace for pod: $pod, container: $container"
            if logs=$(kubectl logs -n "${{ env.namespace }}" "$pod" -c "$container" 2>&1); then
              echo "$logs" > "artifacts/${{ env.namespace }}/$pod-$container.log"
            else
              echo "Could not fetch logs for $pod/$container: $logs" >&2
            fi
            if logs=$(kubectl logs -n "${{ env.namespace }}" "$pod" -c "$container" --previous 2>&1); then
              echo "$logs" > "artifacts/${{ env.namespace }}/$pod-$container-previous.log"
            else
              :
            fi
          done
        done
      shell: bash

    - name: Generate artifact name
      if: always()
      env:
        HEAD_REF: ${{ github.head_ref || github.ref_name }}
      run: |
        # ‚ñ∂Ô∏è Generate artifact name
        release_name=$(echo "$HEAD_REF" | tr '/' '_' || echo "")
        ARTIFACT_NAME="${{ github.job }}_${{ env.namespace }}_${release_name}_artifacts_$(date -u +'%Y%m%d%H%M%S')"
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
      shell: bash

    - name: Upload artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: artifacts/

    - name: Cleanup
      run: |
        kind delete cluster

    - name: Generate Status Summary
      if: always()
      run: |
        cat <<EOF >> $GITHUB_STEP_SUMMARY
        ## Install Jaeger
        Check jaeger status: ${{ steps.check_jaeger.outputs.status || '‚ùìunknown' }}
        ${{ steps.check_jaeger.outputs.details || '‚ùìunknown' }}
        Pods running in jaeger namespace:
        \`\`\`sh
        ${{ steps.jaeger_artifacts.outputs.jaeger_pods || '‚ùìunknown' }}
        \`\`\`

        ## Check integration tests results
        Check integration tests status: ${{ steps.check_integration_tests.outputs.status || '‚ùìunknown' }}
        ${{ steps.check_integration_tests.outputs.details || '' }}
        \`\`\`
        Total tests: ${{ steps.check_integration_tests.outputs.total || '‚ùìunknown' }}
        Failed tests: ${{ steps.check_integration_tests.outputs.failed || '‚ùìunknown' }}
        Skipped tests: ${{ steps.check_integration_tests.outputs.skipped || '‚ùìunknown' }}
        Passed tests: ${{ steps.check_integration_tests.outputs.passed || '‚ùìunknown' }}
        ${{ steps.check_integration_tests.outputs.warning || '' }}
        \`\`\`

        <details>
        <summary><b>üîç See full test logs</b></summary>

        ### Test Summary
        \`\`\`sh
        ${{ steps.check_integration_tests.outputs.test_results || '‚ùìunknown' }}
        \`\`\`
        </details>
        EOF
